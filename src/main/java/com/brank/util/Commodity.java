package com.brank.util;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Commodity extends Contract {
    public static final String[] BINARY_ARRAY = {"","7400000000000000000081525060200191505060405180910390fd5b600360008a815260200190815260200160002060c0604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110935780601f1061106857610100808354040283529160200191611093565b820191906000526020600020905b81548152906001019060200180831161107657829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561110957602002820191906000526020600020905b8154815260200190600101908083116110f5575b5050505050815250509450600093506000925060009150600090505b8460a00151518110156111ab5760018560a001518281518110151561114657fe5b90602001906020020151141561116357838060010194505061119e565b60028560a001518281518110151561117757fe5b90602001906020020151141561119457828060010193505061119d565b81806001019250505b5b8080600101915050611125565b83838397509750975050505050509193909250565b6060600180548060200260200160405190810160405280929190818152602001828054801561120e57602002820191906000526020600020905b8154815260200190600101908083116111fa575b5050505050905090565b60606000806060611227611d2f565b60006003600088815260200190815260200160002060000154141515156112b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f7468697320676f6f6473206973206e6f742065786973743b000000000000000081525060200191505060405180910390fd5b6003600087815260200190815260200160002060c0604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113785780601f1061134d57610100808354040283529160200191611378565b820191906000526020600020905b81548152906001019060200180831161135b57829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582018054806020026020016040519081016040528092919081815260200182805480156113ee57602002820191906000526020600020905b8154815260200190600101908083116113da575b50505050508152505090508060200151816060015182608001518360a001518393508090509450945094509450509193509193565b61142b611c8d565b600060036000888152602001908152602001600020600001541415156114b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f7468697320676f6f64732069732065786973743b00000000000000000000000081525060200191505060405180910390fd5b60025482850211151515611535576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f66756e6473206973206e6f7420656e6f7567680000000000000000000000000081525060200191505060405180910390fd5b8184026002600082825403925050819055506000808881526020019081526020016000206060604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116085780601f106115dd57610100808354040283529160200191611608565b820191906000526020600020905b8154815290600101906020018083116115eb57829003601f168201915b50505050508152602001600282015481525050905060018160400151141515611699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f796f752068617665206e6f2072696768747320746f2061646420676f6f64730081525060200191505060405180910390fd5b60c06040519081016040528087815260200186815260200185815260200184815260200183815260200160006040519080825280602002602001820160405280156116f35781602001602082028038833980820191505090505b5081525060036000888152602001908152602001600020600082015181600001556020820151816001019080519060200190611730929190611caf565b5060408201518160020155606082015181600301556080820151816004015560a082015181600501908051906020019061176b929190611d66565b50905050600486908060018154018082558091505090600182039060005260206000200160009091929091909150555050505050505050565b6117ac611c8d565b60008060036000868152602001908152602001600020600001541415151561183c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f7468697320676f6f6473206973206e6f7420657869737400000000000000000081525060200191505060405180910390fd5b6000808681526020019081526020016000206060604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118fd5780601f106118d2576101008083540402835291602001916118fd565b820191906000526020600020905b8154815290600101906020018083116118e057829003601f168201915b505050505081526020016002820154815250509150600182604001511415156119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f796f752068617665206e6f2072696768747320746f207265647563652070726981526020017f636500000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6003600085815260200190815260200160002090508281600301819055505050505050565b60025481565b6119e7611c8d565b600080600360008681526020019081526020016000206000015414151515611a77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f7468697320676f6f6473206973206e6f7420657869737400000000000000000081525060200191505060405180910390fd5b6000808681526020019081526020016000206060604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b385780601f10611b0d57610100808354040283529160200191611b38565b820191906000526020600020905b815481529060010190602001808311611b1b57829003601f168201915b50505050508152602001600282015481525050915060018260400151141515611bc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f796f752068617665206e6f2072696768747320746f206164642073746f636b0081525060200191505060405180910390fd5b6003600085815260200190815260200160002090508281600401600082825401925050819055508281600201540260025410151515611c70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f66756e6473206973206e6f7420656e6f7567680000000000000000000000000081525060200191505060405180910390fd5b828160020154026002600082825403925050819055505050505050565b6060604051908101604052806000815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611cf057805160ff1916838001178555611d1e565b82800160010185558215611d1e579182015b82811115611d1d578251825591602001919060010190611d02565b5b509050611d2b9190611db3565b5090565b60c0604051908101604052806000815260200160608152602001600081526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215611da2579160200282015b82811115611da1578251825591602001919060010190611d86565b5b509050611daf9190611db3565b5090565b611dd591905b80821115611dd1576000816000905550600101611db9565b5090565b905600a165627a7a7230582059bfd03620c98cd31a1e8028870375a4f7d0d65e896f74e492327fe2787c669b0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","7400000000000000000081525060200191505060405180910390fd5b600360008a815260200190815260200160002060c0604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110935780601f1061106857610100808354040283529160200191611093565b820191906000526020600020905b81548152906001019060200180831161107657829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561110957602002820191906000526020600020905b8154815260200190600101908083116110f5575b5050505050815250509450600093506000925060009150600090505b8460a00151518110156111ab5760018560a001518281518110151561114657fe5b90602001906020020151141561116357838060010194505061119e565b60028560a001518281518110151561117757fe5b90602001906020020151141561119457828060010193505061119d565b81806001019250505b5b8080600101915050611125565b83838397509750975050505050509193909250565b6060600180548060200260200160405190810160405280929190818152602001828054801561120e57602002820191906000526020600020905b8154815260200190600101908083116111fa575b5050505050905090565b60606000806060611227611d2f565b60006003600088815260200190815260200160002060000154141515156112b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f7468697320676f6f6473206973206e6f742065786973743b000000000000000081525060200191505060405180910390fd5b6003600087815260200190815260200160002060c0604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113785780601f1061134d57610100808354040283529160200191611378565b820191906000526020600020905b81548152906001019060200180831161135b57829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582018054806020026020016040519081016040528092919081815260200182805480156113ee57602002820191906000526020600020905b8154815260200190600101908083116113da575b50505050508152505090508060200151816060015182608001518360a001518393508090509450945094509450509193509193565b61142b611c8d565b600060036000888152602001908152602001600020600001541415156114b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f7468697320676f6f64732069732065786973743b00000000000000000000000081525060200191505060405180910390fd5b60025482850211151515611535576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f66756e6473206973206e6f7420656e6f7567680000000000000000000000000081525060200191505060405180910390fd5b8184026002600082825403925050819055506000808881526020019081526020016000206060604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116085780601f106115dd57610100808354040283529160200191611608565b820191906000526020600020905b8154815290600101906020018083116115eb57829003601f168201915b50505050508152602001600282015481525050905060018160400151141515611699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f796f752068617665206e6f2072696768747320746f2061646420676f6f64730081525060200191505060405180910390fd5b60c06040519081016040528087815260200186815260200185815260200184815260200183815260200160006040519080825280602002602001820160405280156116f35781602001602082028038833980820191505090505b5081525060036000888152602001908152602001600020600082015181600001556020820151816001019080519060200190611730929190611caf565b5060408201518160020155606082015181600301556080820151816004015560a082015181600501908051906020019061176b929190611d66565b50905050600486908060018154018082558091505090600182039060005260206000200160009091929091909150555050505050505050565b6117ac611c8d565b60008060036000868152602001908152602001600020600001541415151561183c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f7468697320676f6f6473206973206e6f7420657869737400000000000000000081525060200191505060405180910390fd5b6000808681526020019081526020016000206060604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118fd5780601f106118d2576101008083540402835291602001916118fd565b820191906000526020600020905b8154815290600101906020018083116118e057829003601f168201915b505050505081526020016002820154815250509150600182604001511415156119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f796f752068617665206e6f2072696768747320746f207265647563652070726981526020017f636500000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6003600085815260200190815260200160002090508281600301819055505050505050565b60025481565b6119e7611c8d565b600080600360008681526020019081526020016000206000015414151515611a77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f7468697320676f6f6473206973206e6f7420657869737400000000000000000081525060200191505060405180910390fd5b6000808681526020019081526020016000206060604051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b385780601f10611b0d57610100808354040283529160200191611b38565b820191906000526020600020905b815481529060010190602001808311611b1b57829003601f168201915b50505050508152602001600282015481525050915060018260400151141515611bc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f796f752068617665206e6f2072696768747320746f206164642073746f636b0081525060200191505060405180910390fd5b6003600085815260200190815260200160002090508281600401600082825401925050819055508281600201540260025410151515611c70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f66756e6473206973206e6f7420656e6f7567680000000000000000000000000081525060200191505060405180910390fd5b828160020154026002600082825403925050819055505050505050565b6060604051908101604052806000815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611cf057805160ff1916838001178555611d1e565b82800160010185558215611d1e579182015b82811115611d1d578251825591602001919060010190611d02565b5b509050611d2b9190611db3565b5090565b60c0604051908101604052806000815260200160608152602001600081526020016000815260200160008152602001606081525090565b828054828255906000526020600020908101928215611da2579160200282015b82811115611da1578251825591602001919060010190611d86565b5b509050611daf9190611db3565b5090565b611dd591905b80821115611dd1576000816000905550600101611db9565b5090565b905600a165627a7a7230582059bfd03620c98cd31a1e8028870375a4f7d0d65e896f74e492327fe2787c669b0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"name\":\"purchased\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_num\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"evaluation\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"purchased(uint256,uint256,uint256,uint256)\"},{\"name\":\"raiseRights\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_role\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"raiseRights(uint256,uint256)\"},{\"name\":\"getFunds\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"methodSignatureAsString\":\"getFunds()\"},{\"name\":\"getRole\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"methodSignatureAsString\":\"getRole(uint256)\"},{\"name\":\"raisePrice\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"roleId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"raisePrice(uint256,uint256,uint256)\"},{\"name\":\"addRole\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"_role\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"addRole(uint256,string,uint256)\"},{\"name\":\"addEvaluate\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"evaluation\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"addEvaluate(uint256,uint256)\"},{\"name\":\"listGoods\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256[]\"}],\"methodSignatureAsString\":\"listGoods()\"},{\"name\":\"getGoodsEvaluate\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"methodSignatureAsString\":\"getGoodsEvaluate(uint256)\"},{\"name\":\"listId\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256[]\"}],\"methodSignatureAsString\":\"listId()\"},{\"name\":\"getGoods\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256[]\"}],\"methodSignatureAsString\":\"getGoods(uint256)\"},{\"name\":\"addGoods\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"roleId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"_purchasePrice\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_sellingPrice\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_stock\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"addGoods(uint256,uint256,string,uint256,uint256,uint256)\"},{\"name\":\"reducePrice\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"roleId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"reducePrice(uint256,uint256,uint256)\"},{\"name\":\"funds\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"methodSignatureAsString\":\"funds()\"},{\"name\":\"addStock\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"roleId\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"_stock\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[],\"methodSignatureAsString\":\"addStock(uint256,uint256,uint256)\"},{\"name\":null,\"type\":\"constructor\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_funds\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":null,\"methodSignatureAsString\":\"null(uint256)\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_PURCHASED = "purchased";

    public static final String FUNC_RAISERIGHTS = "raiseRights";

    public static final String FUNC_GETFUNDS = "getFunds";

    public static final String FUNC_GETROLE = "getRole";

    public static final String FUNC_RAISEPRICE = "raisePrice";

    public static final String FUNC_ADDROLE = "addRole";

    public static final String FUNC_ADDEVALUATE = "addEvaluate";

    public static final String FUNC_LISTGOODS = "listGoods";

    public static final String FUNC_GETGOODSEVALUATE = "getGoodsEvaluate";

    public static final String FUNC_LISTID = "listId";

    public static final String FUNC_GETGOODS = "getGoods";

    public static final String FUNC_ADDGOODS = "addGoods";

    public static final String FUNC_REDUCEPRICE = "reducePrice";

    public static final String FUNC_FUNDS = "funds";

    public static final String FUNC_ADDSTOCK = "addStock";

    protected Commodity(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt purchased(BigInteger _id, BigInteger _num, BigInteger _price, BigInteger evaluation) {
        final Function function = new Function(
                FUNC_PURCHASED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_num), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_price), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(evaluation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void purchased(BigInteger _id, BigInteger _num, BigInteger _price, BigInteger evaluation, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PURCHASED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_num), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_price), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(evaluation)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPurchased(BigInteger _id, BigInteger _num, BigInteger _price, BigInteger evaluation) {
        final Function function = new Function(
                FUNC_PURCHASED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_num), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_price), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(evaluation)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> getPurchasedInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PURCHASED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public TransactionReceipt raiseRights(BigInteger _id, BigInteger _role) {
        final Function function = new Function(
                FUNC_RAISERIGHTS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void raiseRights(BigInteger _id, BigInteger _role, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RAISERIGHTS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_role)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRaiseRights(BigInteger _id, BigInteger _role) {
        final Function function = new Function(
                FUNC_RAISERIGHTS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_role)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getRaiseRightsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RAISERIGHTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getFunds() throws ContractException {
        final Function function = new Function(FUNC_GETFUNDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<String, BigInteger> getRole(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_GETROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<String, BigInteger>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt raisePrice(BigInteger roleId, BigInteger _id, BigInteger _price) {
        final Function function = new Function(
                FUNC_RAISEPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void raisePrice(BigInteger roleId, BigInteger _id, BigInteger _price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RAISEPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRaisePrice(BigInteger roleId, BigInteger _id, BigInteger _price) {
        final Function function = new Function(
                FUNC_RAISEPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getRaisePriceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RAISEPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt addRole(BigInteger _id, String _name, BigInteger _role) {
        final Function function = new Function(
                FUNC_ADDROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addRole(BigInteger _id, String _name, BigInteger _role, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_role)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddRole(BigInteger _id, String _name, BigInteger _role) {
        final Function function = new Function(
                FUNC_ADDROLE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_role)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getAddRoleInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt addEvaluate(BigInteger _id, BigInteger evaluation) {
        final Function function = new Function(
                FUNC_ADDEVALUATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(evaluation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addEvaluate(BigInteger _id, BigInteger evaluation, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDEVALUATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(evaluation)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddEvaluate(BigInteger _id, BigInteger evaluation) {
        final Function function = new Function(
                FUNC_ADDEVALUATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(evaluation)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getAddEvaluateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDEVALUATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List listGoods() throws ContractException {
        final Function function = new Function(FUNC_LISTGOODS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getGoodsEvaluate(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_GETGOODSEVALUATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public List listId() throws ContractException {
        final Function function = new Function(FUNC_LISTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple4<String, BigInteger, BigInteger, List<BigInteger>> getGoods(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_GETGOODS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<String, BigInteger, BigInteger, List<BigInteger>>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                convertToNative((List<Uint256>) results.get(3).getValue()));
    }

    public TransactionReceipt addGoods(BigInteger roleId, BigInteger _id, String _name, BigInteger _purchasePrice, BigInteger _sellingPrice, BigInteger _stock) {
        final Function function = new Function(
                FUNC_ADDGOODS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_purchasePrice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sellingPrice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_stock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addGoods(BigInteger roleId, BigInteger _id, String _name, BigInteger _purchasePrice, BigInteger _sellingPrice, BigInteger _stock, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDGOODS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_purchasePrice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sellingPrice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_stock)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddGoods(BigInteger roleId, BigInteger _id, String _name, BigInteger _purchasePrice, BigInteger _sellingPrice, BigInteger _stock) {
        final Function function = new Function(
                FUNC_ADDGOODS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_purchasePrice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sellingPrice), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_stock)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger> getAddGoodsInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDGOODS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue()
                );
    }

    public TransactionReceipt reducePrice(BigInteger roleId, BigInteger _id, BigInteger _price) {
        final Function function = new Function(
                FUNC_REDUCEPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void reducePrice(BigInteger roleId, BigInteger _id, BigInteger _price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REDUCEPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForReducePrice(BigInteger roleId, BigInteger _id, BigInteger _price) {
        final Function function = new Function(
                FUNC_REDUCEPRICE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getReducePriceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REDUCEPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger funds() throws ContractException {
        final Function function = new Function(FUNC_FUNDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addStock(BigInteger roleId, BigInteger _id, BigInteger _stock) {
        final Function function = new Function(
                FUNC_ADDSTOCK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_stock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addStock(BigInteger roleId, BigInteger _id, BigInteger _stock, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDSTOCK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_stock)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddStock(BigInteger roleId, BigInteger _id, BigInteger _stock) {
        final Function function = new Function(
                FUNC_ADDSTOCK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(roleId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_stock)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getAddStockInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDSTOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public static Commodity load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Commodity(contractAddress, client, credential);
    }

    public static Commodity deploy(Client client, CryptoKeyPair credential, BigInteger _funds) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_funds)));
        return deploy(Commodity.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }
}
